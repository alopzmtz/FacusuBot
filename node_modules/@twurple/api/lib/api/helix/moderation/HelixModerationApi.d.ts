import type { UserIdResolvable } from '@twurple/common';
import { BaseApi } from '../../BaseApi';
import { HelixPaginatedRequest } from '../HelixPaginatedRequest';
import type { HelixPaginatedResult } from '../HelixPaginatedResult';
import type { HelixForwardPagination } from '../HelixPagination';
import { HelixAutoModSettings } from './HelixAutoModSettings';
import { HelixAutoModStatus } from './HelixAutoModStatus';
import type { HelixBanData } from './HelixBan';
import { HelixBan } from './HelixBan';
import type { HelixModeratorData } from './HelixModerator';
import { HelixModerator } from './HelixModerator';
/**
 * Filters for the banned users request.
 */
export interface HelixBanFilter extends HelixForwardPagination {
    /**
     * A user ID or a list thereof.
     */
    userId: string | string[];
}
/**
 * Filters for the moderators request.
 */
export interface HelixModeratorFilter extends HelixForwardPagination {
    /**
     * A user ID or a list thereof.
     */
    userId: string | string[];
}
export interface HelixCheckAutoModStatusData {
    /**
     * The developer-generated ID for mapping messages to their status results.
     */
    messageId: string;
    /**
     * The text of the message the AutoMod status needs to be checked for.
     */
    messageText: string;
    /**
     * The ID of the sender of the message the AutoMod status needs to be checked for.
     */
    userId: string;
}
export declare type HelixAutoModSettingsUpdate = Exclude<HelixAutoModSettings, 'broadcasterId' | 'moderatorId'>;
/**
 * The Helix API methods that deal with moderation.
 *
 * Can be accessed using `client.moderation` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const { data: users } = await api.moderation.getBannedUsers('61369223');
 * ```
 */
export declare class HelixModerationApi extends BaseApi {
    /**
     * Retrieves a list of banned users in a given channel.
     *
     * @param channel The channel to retrieve the banned users from.
     * @param filter Additional filters for the result set.
     */
    getBannedUsers(channel: UserIdResolvable, filter?: HelixBanFilter): Promise<HelixPaginatedResult<HelixBan>>;
    /**
     * Creates a paginator for banned users in a given channel.
     *
     * @param channel The channel to retrieve the banned users from.
     */
    getBannedUsersPaginated(channel: UserIdResolvable): HelixPaginatedRequest<HelixBanData, HelixBan>;
    /**
     * Checks whether a given user is banned in a given channel.
     *
     * @param channel The channel to check for a ban of the given user.
     * @param user The user to check for a ban in the given channel.
     */
    checkUserBan(channel: UserIdResolvable, user: UserIdResolvable): Promise<boolean>;
    /**
     * Retrieves a list of moderators in a given channel.
     *
     * @param channel The channel to retrieve moderators from.
     * @param filter Additional filters for the result set.
     */
    getModerators(channel: UserIdResolvable, filter?: HelixModeratorFilter): Promise<HelixPaginatedResult<HelixModerator>>;
    /**
     * Creates a paginator for moderators in a given channel.
     *
     * @param channel The channel to retrieve moderators from.
     */
    getModeratorsPaginated(channel: UserIdResolvable): HelixPaginatedRequest<HelixModeratorData, HelixModerator>;
    /**
     * Checks whether a given user is a moderator of a given channel.
     *
     * @param channel The channel to check.
     * @param user The user to check.
     */
    checkUserMod(channel: UserIdResolvable, user: UserIdResolvable): Promise<boolean>;
    /**
     * Determines whether a string message meets the channel's AutoMod requirements.
     *
     * @param channel The channel in which the messages to check are posted.
     * @param data An array of message data objects.
     */
    checkAutoModStatus(channel: UserIdResolvable, data: HelixCheckAutoModStatusData[]): Promise<HelixAutoModStatus[]>;
    /**
     * Processes a message held by AutoMod.
     *
     * @param user The user who is processing the message.
     * @param msgId The ID of the message.
     * @param allow Whether to allow the message - `true` allows, and `false` denies.
     */
    processHeldAutoModMessage(user: UserIdResolvable, msgId: string, allow: boolean): Promise<void>;
    /**
     * Retrieves the AutoMod settings for a broadcaster.
     *
     * @param broadcasterId The ID of the broadcaster for which the AutoMod settings are retrieved.
     * @param moderatorId The ID of a user that has permission to moderate the broadcaster's chat room.
     * This must match the user ID associated with the user OAuth token.
     */
    getAutoModSettings(broadcasterId: UserIdResolvable, moderatorId: UserIdResolvable): Promise<HelixAutoModSettings[]>;
    /**
     * Updates the AutoMod settings for a broadcaster.
     *
     * @param broadcasterId The ID of the broadcaster for which the AutoMod settings are updated.
     * @param moderatorId The ID of a user that has permission to moderate the broadcaster's chat room.
     * This must match the user ID associated with the user OAuth token.
     * @param data The updated AutoMod settings that replace the current AutoMod settings.
     */
    updateAutoModSettings(broadcasterId: UserIdResolvable, moderatorId: UserIdResolvable, data: HelixAutoModSettingsUpdate): Promise<HelixAutoModSettings[]>;
}
//# sourceMappingURL=HelixModerationApi.d.ts.map