"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("../helpers");
describe('Scope comparer', () => {
    it('does nothing when required scopes are absent', () => {
        (0, helpers_1.compareScopes)([]);
        (0, helpers_1.compareScopes)([], []);
        (0, helpers_1.compareScopes)(['channel:moderate']);
        (0, helpers_1.compareScopes)(['channel:moderate'], []);
    });
    it('passes when required scopes are met', () => {
        (0, helpers_1.compareScopes)(['bits:read'], ['bits:read']);
        (0, helpers_1.compareScopes)(['bits:read', 'channel:moderate'], ['bits:read']);
        (0, helpers_1.compareScopes)(['bits:read', 'channel:moderate'], ['bits:read', 'channel:moderate']);
        (0, helpers_1.compareScopes)(['bits:read', 'channel:moderate', 'channel:read:goals'], ['bits:read', 'channel:moderate']);
        (0, helpers_1.compareScopes)(['bits:read', 'channel:moderate', 'channel:read:goals'], ['bits:read', 'channel:moderate', 'channel:read:goals']);
    });
    function expectError(scopesToCompare, requestedScopes) {
        expect(() => {
            (0, helpers_1.compareScopes)(scopesToCompare, requestedScopes);
        }).toThrow();
    }
    it('throws error when a require scope is not present', () => {
        expectError([], ['bits:read']);
        expectError(['channel:moderate'], ['bits:read']);
        expectError(['channel:moderate'], ['bits:read', 'channel:moderate']);
        expectError(['channel:moderate'], ['channel:moderate', 'bits:read']);
        expectError(['channel:moderate', 'channel:read:goals'], ['channel:moderate', 'bits:read']);
        expectError(['channel:moderate', 'channel:read:goals'], ['channel:moderate', 'channel:read:goals', 'bits:read']);
    });
    it('passes for scope equivalencies', () => {
        (0, helpers_1.compareScopes)(['user:edit:broadcast'], ['channel:manage:broadcast']);
        (0, helpers_1.compareScopes)(['channel_subscriptions'], ['channel:read:subscriptions']);
        (0, helpers_1.compareScopes)(['channel_subscriptions', 'channel:read:subscriptions'], ['channel:read:subscriptions']);
        (0, helpers_1.compareScopes)(['channel_subscriptions', 'channel:read:subscriptions'], ['channel_subscriptions', 'channel:read:subscriptions']);
        (0, helpers_1.compareScopes)(['channel_subscriptions', 'user_blocks_read'], ['channel:read:subscriptions']);
        (0, helpers_1.compareScopes)(['channel_subscriptions', 'user_blocks_read'], ['channel:read:subscriptions', 'user:read:blocked_users']);
        (0, helpers_1.compareScopes)(['channel_subscriptions', 'user_blocks_read', 'channel:read:goals'], ['channel:read:subscriptions', 'user:read:blocked_users']);
        (0, helpers_1.compareScopes)(['channel_subscriptions', 'user_blocks_read', 'channel:read:goals'], ['channel:read:subscriptions', 'user:read:blocked_users', 'channel:read:goals']);
    });
    it('avoids undesired reverse scope equivalencies', () => {
        expectError(['channel:manage:broadcast'], ['user:edit:broadcast']);
    });
});
